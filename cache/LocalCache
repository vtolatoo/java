public class LocalCache<T> {
    private final Map<String, SoftReference<LocalCacheBean<T>>> localCacheMap = new ConcurrentHashMap<>();
    //过期时间60s
    private long expireTime = 1000 * 60;

    public LocalCache(){}

    public LocalCache(long expireTime) {
        this.expireTime = expireTime;
    }

    private class LocalCacheBean<T> {
        long time;
        T value;

        private LocalCacheBean(T value) {
            this.time = System.currentTimeMillis() + expireTime;
            this.value = value;
        }

        private boolean isExpired() {
            return this.time - System.currentTimeMillis() < 0;
        }
    }

    public void set(String key, T value) {
        SoftReference<LocalCacheBean<T>> softReference = new SoftReference(new LocalCacheBean(value));
        localCacheMap.put(key, softReference);
    }

    public T get(String key) {
        SoftReference<LocalCacheBean<T>> softReference = localCacheMap.get(key);
        if (softReference == null || softReference.get() == null) {
            return null;
        }
        LocalCacheBean<T> localCacheBean = softReference.get();
        if ( localCacheBean.isExpired()) {
            localCacheMap.remove(key);
            return null;
        }
        return localCacheBean.value;
    }

}
